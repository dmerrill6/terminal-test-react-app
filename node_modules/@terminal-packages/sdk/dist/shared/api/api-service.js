"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const environment_types_1 = require("../enums/environment-types");
const http_verb_1 = require("./enums/http-verb");
class ApiService {
    constructor(_apiKey, _environment) {
        this._apiKey = _apiKey;
        this._environment = _environment;
    }
    /**
     * Save to logs
     */
    saveToLogs(saveLogRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            // Default options are marked with *
            yield cross_fetch_1.default(`${this.environmentUrl}logs/networks`, {
                method: http_verb_1.HttpVerb.POST,
                mode: 'cors',
                cache: 'no-cache',
                headers: {
                    // tslint:disable-next-line: quotemark
                    ApiKey: this._apiKey,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(saveLogRequest)
            });
        });
    }
    /**
     * get the environment url
     */
    get environmentUrl() {
        switch (this._environment) {
            case environment_types_1.EnvironmentTypes.dev:
                return 'https://dev.terminal.co/';
            case environment_types_1.EnvironmentTypes.staging:
                return 'https://stg.terminal.co/';
            default:
                return 'https://terminal.co/';
        }
    }
}
exports.ApiService = ApiService;
